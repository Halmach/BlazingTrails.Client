@implements IDisposable
<p>
@foreach (var word in _greeting)
{
        <span> @word&nbsp;</span>
}
</p>
@code {

    List<string> _greeting = new List<string>();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine("SetParametersAsync - Begin");
        await base.SetParametersAsync(parameters);
        Console.WriteLine("SetParametersAync - End");
    }

    protected override void OnInitialized()
    {
            Console.WriteLine("OnInitialized");
    }

    protected override async Task OnInitializedAsync()
    {
        // Console.WriteLine("OnInitializedAsync - Begin");
        // await Task.Delay(300);
        // Console.WriteLine("OnInitializedAsync - End");

        _greeting.Add("Welcome");

        await Task.Delay(1000);
        _greeting.Add("to");
        StateHasChanged();
        await Task.Delay(1000);
        _greeting.Add("Blazor in Action");
    }

    protected override void OnParametersSet() => Console.WriteLine("OnParametersSet");

    protected override async Task OnParametersSetAsync() => Console.WriteLine("OnParametersSetAsync");

    protected override void OnAfterRender(bool firstRender) => Console.WriteLine($"OnAfterRender (First render: {firstRender})");

    protected override async Task OnAfterRenderAsync(bool firstRender) => Console.WriteLine($"OnAfterRenderAsync (First render: {firstRender})");

    public void Dispose ()
        => Console.WriteLine($"Dispose");
}
